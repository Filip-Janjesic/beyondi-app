import { throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { Injectable, Inject } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./cookie.service";
import * as i3 from "@angular/router";
export class AuthService {
    constructor(http, cookieService, r, auth_urls) {
        this.http = http;
        this.cookieService = cookieService;
        this.r = r;
        this.auth_urls = auth_urls;
        this.cookieOpts = {
            // domain: 'localhost',
            path: '/',
            expires: 3,
            // expires: new Date('2018-10-31T03:24:00'),
            secure: false,
            httpOnly: false,
            sameSite: 'strict'
        };
    }
    /**
     * Login with username and password
     * @param creds // credentials object {username: xxx, password: xxx}
     * @return Observable
     */
    login(creds) {
        return this.http.post(this.auth_urls.apiLoginUrl, creds).pipe(tap((apiResp) => {
            /* set cookie 'auth_jwtToken': 'JWT xyz...' */
            if (!!apiResp && !!apiResp.jwtToken) {
                this.cookieService.put('auth_jwtToken', apiResp.jwtToken, this.cookieOpts, false);
            }
            /* set cookie 'auth_loggedUser' and class property 'this.loggedUser': {first_name: , last_name: , ...} */
            if (!!apiResp && !!apiResp.loggedUser) {
                this.cookieService.putObject('auth_loggedUser', apiResp.loggedUser, this.cookieOpts, false);
                this.loggedUser = apiResp.loggedUser;
            }
            /* redirect to URL */
            const afterGoodLoginURL = this.auth_urls.afterGoodLogin.replace('{loggedUserRole}', apiResp.loggedUser.role);
            this.r.navigateByUrl(afterGoodLoginURL);
        }), catchError((err) => {
            /* remove all cookies */
            this.cookieService.removeAll(false);
            /* remove loggedUser class property */
            this.loggedUser = null;
            // return error
            return throwError(() => err);
        }));
    }
    /**
     * Logout
     * @return Observable
     */
    logout() {
        // delete all cookies
        this.cookieService.removeAll(false);
        // delete class property
        this.loggedUser = null;
        // redirect
        setTimeout(() => {
            const afterLogoutURL = this.auth_urls.afterLogout;
            this.r.navigateByUrl(afterLogoutURL);
        }, 300);
    }
    /**
     * Get logged user info (from global variables or cookie)
     * @return object - {first_name: , last_name: , ...}
     */
    getLoggedUserInfo() {
        const loggedUser = this.loggedUser || this.cookieService.getObject('auth_loggedUser', false);
        return loggedUser;
    }
    /**
     * Get JWT token from cookie
     * @return string - JWT eyJhbGciOiJIUzI1NiIsInR...
     */
    getJWTtoken() {
        const jwtToken = this.cookieService.get('auth_jwtToken', false) || 'JWT ';
        return jwtToken;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: AuthService, deps: [{ token: i1.HttpClient }, { token: i2.CookieService }, { token: i3.Router }, { token: 'AUTH_URLS' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: AuthService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: AuthService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.CookieService }, { type: i3.Router }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['AUTH_URLS']
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdib29zdC1hdXRoL3NyYy9saWIvYXV0aC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFFOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUF1Q25ELE1BQU0sT0FBTyxXQUFXO0lBTXRCLFlBQ1UsSUFBZ0IsRUFDaEIsYUFBNEIsRUFDNUIsQ0FBUyxFQUNZLFNBQWM7UUFIbkMsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM1QixNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQ1ksY0FBUyxHQUFULFNBQVMsQ0FBSztRQUUzQyxJQUFJLENBQUMsVUFBVSxHQUFHO1lBQ2hCLHVCQUF1QjtZQUN2QixJQUFJLEVBQUUsR0FBRztZQUNULE9BQU8sRUFBRSxDQUFDO1lBQ1YsNENBQTRDO1lBQzVDLE1BQU0sRUFBRSxLQUFLO1lBQ2IsUUFBUSxFQUFFLEtBQUs7WUFDZixRQUFRLEVBQUUsUUFBUTtTQUNuQixDQUFDO0lBQ0osQ0FBQztJQUdEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsS0FBa0I7UUFDdEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQzNELEdBQUcsQ0FBQyxDQUFDLE9BQVksRUFBRSxFQUFFO1lBRW5CLDhDQUE4QztZQUM5QyxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNwRixDQUFDO1lBRUQseUdBQXlHO1lBQ3pHLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUN0QyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQzVGLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztZQUN2QyxDQUFDO1lBRUQscUJBQXFCO1lBQ3JCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0csSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsRUFDRixVQUFVLENBQUMsQ0FBQyxHQUFVLEVBQUUsRUFBRTtZQUN4Qix3QkFBd0I7WUFDeEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFcEMsc0NBQXNDO1lBQ3RDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1lBRXZCLGVBQWU7WUFDZixPQUFPLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRVIsQ0FBQztJQUlEOzs7T0FHRztJQUNILE1BQU07UUFDSixxQkFBcUI7UUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFcEMsd0JBQXdCO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBRXZCLFdBQVc7UUFDWCxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7WUFDbEQsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRVYsQ0FBQztJQUdEOzs7T0FHRztJQUNILGlCQUFpQjtRQUNmLE1BQU0sVUFBVSxHQUFlLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekcsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUdEOzs7T0FHRztJQUNILFdBQVc7UUFDVCxNQUFNLFFBQVEsR0FBVyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDO1FBQ2xGLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7OEdBcEdVLFdBQVcsK0ZBVVosV0FBVztrSEFWVixXQUFXOzsyRkFBWCxXQUFXO2tCQUR2QixVQUFVOzswQkFXTixNQUFNOzJCQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0aHJvd0Vycm9yLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IGNhdGNoRXJyb3IsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IENvb2tpZVNlcnZpY2UgfSBmcm9tICcuL2Nvb2tpZS5zZXJ2aWNlJztcblxuXG5cbi8vIGNyZWRlbnRpYWxzIGludGVyZmFjZVxuZXhwb3J0IGludGVyZmFjZSBDcmVkZW50aWFscyB7XG4gIHVzZXJuYW1lOiBzdHJpbmc7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG59XG5cblxuLy8gbG9nZ2VkIHVzZXIgaW5mb1xuZXhwb3J0IGludGVyZmFjZSBMb2dnZWRVc2VyIHtcbiAgZmlyc3RfbmFtZTogc3RyaW5nO1xuICBsYXN0X25hbWU6IHN0cmluZztcbiAgYWRkcmVzcz86IHN0cmluZztcbiAgY2l0eT86IHN0cmluZztcbiAgY291bnRyeT86IHN0cmluZztcblxuICBwaG9uZT86IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgd2Vic2l0ZT86IHN0cmluZztcblxuICBtaXNjPzogYW55O1xuXG4gIHVzZXJuYW1lOiBzdHJpbmc7XG4gIHBhc3N3b3JkPzogc3RyaW5nO1xuXG4gIHJvbGU6IHN0cmluZztcbiAgaXNfYWN0aXZlPzogYm9vbGVhbjtcbn1cblxuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBdXRoU2VydmljZSB7XG5cbiAgcHVibGljIGp3dFRva2VuOiBzdHJpbmc7XG4gIHByaXZhdGUgbG9nZ2VkVXNlcjogTG9nZ2VkVXNlciB8IG51bGw7XG4gIHByaXZhdGUgY29va2llT3B0czogYW55O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICBwcml2YXRlIGNvb2tpZVNlcnZpY2U6IENvb2tpZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSByOiBSb3V0ZXIsXG4gICAgQEluamVjdCgnQVVUSF9VUkxTJykgcHJpdmF0ZSBhdXRoX3VybHM6IGFueSwgLy8ge2FwaUxvZ2luVVJMLCBhZnRlckdvb2RMb2dpbiwgYWZ0ZXJCYWRMb2dpbiwgYWZ0ZXJMb2dvdXR9XG4gICkge1xuICAgIHRoaXMuY29va2llT3B0cyA9IHtcbiAgICAgIC8vIGRvbWFpbjogJ2xvY2FsaG9zdCcsXG4gICAgICBwYXRoOiAnLycsXG4gICAgICBleHBpcmVzOiAzLFxuICAgICAgLy8gZXhwaXJlczogbmV3IERhdGUoJzIwMTgtMTAtMzFUMDM6MjQ6MDAnKSxcbiAgICAgIHNlY3VyZTogZmFsc2UsXG4gICAgICBodHRwT25seTogZmFsc2UsXG4gICAgICBzYW1lU2l0ZTogJ3N0cmljdCdcbiAgICB9O1xuICB9XG5cblxuICAvKipcbiAgICogTG9naW4gd2l0aCB1c2VybmFtZSBhbmQgcGFzc3dvcmRcbiAgICogQHBhcmFtIGNyZWRzIC8vIGNyZWRlbnRpYWxzIG9iamVjdCB7dXNlcm5hbWU6IHh4eCwgcGFzc3dvcmQ6IHh4eH1cbiAgICogQHJldHVybiBPYnNlcnZhYmxlXG4gICAqL1xuICBsb2dpbihjcmVkczogQ3JlZGVudGlhbHMpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLmF1dGhfdXJscy5hcGlMb2dpblVybCwgY3JlZHMpLnBpcGUoXG4gICAgICB0YXAoKGFwaVJlc3A6IGFueSkgPT4ge1xuXG4gICAgICAgIC8qIHNldCBjb29raWUgJ2F1dGhfand0VG9rZW4nOiAnSldUIHh5ei4uLicgKi9cbiAgICAgICAgaWYgKCEhYXBpUmVzcCAmJiAhIWFwaVJlc3Auand0VG9rZW4pIHtcbiAgICAgICAgICB0aGlzLmNvb2tpZVNlcnZpY2UucHV0KCdhdXRoX2p3dFRva2VuJywgYXBpUmVzcC5qd3RUb2tlbiwgdGhpcy5jb29raWVPcHRzLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBzZXQgY29va2llICdhdXRoX2xvZ2dlZFVzZXInIGFuZCBjbGFzcyBwcm9wZXJ0eSAndGhpcy5sb2dnZWRVc2VyJzoge2ZpcnN0X25hbWU6ICwgbGFzdF9uYW1lOiAsIC4uLn0gKi9cbiAgICAgICAgaWYgKCEhYXBpUmVzcCAmJiAhIWFwaVJlc3AubG9nZ2VkVXNlcikge1xuICAgICAgICAgIHRoaXMuY29va2llU2VydmljZS5wdXRPYmplY3QoJ2F1dGhfbG9nZ2VkVXNlcicsIGFwaVJlc3AubG9nZ2VkVXNlciwgdGhpcy5jb29raWVPcHRzLCBmYWxzZSk7XG4gICAgICAgICAgdGhpcy5sb2dnZWRVc2VyID0gYXBpUmVzcC5sb2dnZWRVc2VyO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogcmVkaXJlY3QgdG8gVVJMICovXG4gICAgICAgIGNvbnN0IGFmdGVyR29vZExvZ2luVVJMID0gdGhpcy5hdXRoX3VybHMuYWZ0ZXJHb29kTG9naW4ucmVwbGFjZSgne2xvZ2dlZFVzZXJSb2xlfScsIGFwaVJlc3AubG9nZ2VkVXNlci5yb2xlKTtcbiAgICAgICAgdGhpcy5yLm5hdmlnYXRlQnlVcmwoYWZ0ZXJHb29kTG9naW5VUkwpO1xuICAgICAgfSksXG4gICAgICBjYXRjaEVycm9yKChlcnI6IEVycm9yKSA9PiB7XG4gICAgICAgIC8qIHJlbW92ZSBhbGwgY29va2llcyAqL1xuICAgICAgICB0aGlzLmNvb2tpZVNlcnZpY2UucmVtb3ZlQWxsKGZhbHNlKTtcblxuICAgICAgICAvKiByZW1vdmUgbG9nZ2VkVXNlciBjbGFzcyBwcm9wZXJ0eSAqL1xuICAgICAgICB0aGlzLmxvZ2dlZFVzZXIgPSBudWxsO1xuXG4gICAgICAgIC8vIHJldHVybiBlcnJvclxuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcigoKSA9PiBlcnIpO1xuICAgICAgfSkpO1xuXG4gIH1cblxuXG5cbiAgLyoqXG4gICAqIExvZ291dFxuICAgKiBAcmV0dXJuIE9ic2VydmFibGVcbiAgICovXG4gIGxvZ291dCgpOiB2b2lkIHtcbiAgICAvLyBkZWxldGUgYWxsIGNvb2tpZXNcbiAgICB0aGlzLmNvb2tpZVNlcnZpY2UucmVtb3ZlQWxsKGZhbHNlKTtcblxuICAgIC8vIGRlbGV0ZSBjbGFzcyBwcm9wZXJ0eVxuICAgIHRoaXMubG9nZ2VkVXNlciA9IG51bGw7XG5cbiAgICAvLyByZWRpcmVjdFxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgYWZ0ZXJMb2dvdXRVUkwgPSB0aGlzLmF1dGhfdXJscy5hZnRlckxvZ291dDtcbiAgICAgIHRoaXMuci5uYXZpZ2F0ZUJ5VXJsKGFmdGVyTG9nb3V0VVJMKTtcbiAgICB9LCAzMDApO1xuXG4gIH1cblxuXG4gIC8qKlxuICAgKiBHZXQgbG9nZ2VkIHVzZXIgaW5mbyAoZnJvbSBnbG9iYWwgdmFyaWFibGVzIG9yIGNvb2tpZSlcbiAgICogQHJldHVybiBvYmplY3QgLSB7Zmlyc3RfbmFtZTogLCBsYXN0X25hbWU6ICwgLi4ufVxuICAgKi9cbiAgZ2V0TG9nZ2VkVXNlckluZm8oKTogTG9nZ2VkVXNlciB7XG4gICAgY29uc3QgbG9nZ2VkVXNlcjogTG9nZ2VkVXNlciA9IHRoaXMubG9nZ2VkVXNlciB8fCB0aGlzLmNvb2tpZVNlcnZpY2UuZ2V0T2JqZWN0KCdhdXRoX2xvZ2dlZFVzZXInLCBmYWxzZSk7XG4gICAgcmV0dXJuIGxvZ2dlZFVzZXI7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBHZXQgSldUIHRva2VuIGZyb20gY29va2llXG4gICAqIEByZXR1cm4gc3RyaW5nIC0gSldUIGV5SmhiR2NpT2lKSVV6STFOaUlzSW5SLi4uXG4gICAqL1xuICBnZXRKV1R0b2tlbigpOiBzdHJpbmcge1xuICAgIGNvbnN0IGp3dFRva2VuOiBzdHJpbmcgPSB0aGlzLmNvb2tpZVNlcnZpY2UuZ2V0KCdhdXRoX2p3dFRva2VuJywgZmFsc2UpIHx8ICdKV1QgJztcbiAgICByZXR1cm4gand0VG9rZW47XG4gIH1cblxuXG59XG4iXX0=