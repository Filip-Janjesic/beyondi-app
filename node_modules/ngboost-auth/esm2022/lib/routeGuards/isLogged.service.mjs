import { Injectable, Inject } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../auth.service";
import * as i2 from "@angular/router";
/**
 * Check if user is logged.
 */
export class IsLoggedService {
    constructor(authService, r, auth_urls) {
        this.authService = authService;
        this.r = r;
        this.auth_urls = auth_urls;
    }
    canActivate(ars, rss) {
        // get loggedUser info after successful username:password login
        const loggedUser = this.authService.getLoggedUserInfo();
        // console.log('GUARD::isLogged:loggedUser: ', loggedUser);
        const isAlreadyLogged = !!loggedUser && !!loggedUser.username;
        // redirect to /login
        if (!isAlreadyLogged) {
            this.r.navigateByUrl(this.auth_urls.afterBadLogin);
            console.error(new Error('Guard blocks this route because user is not logged. Redirection to /login page.'));
        }
        return isAlreadyLogged;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: IsLoggedService, deps: [{ token: i1.AuthService }, { token: i2.Router }, { token: 'AUTH_URLS' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: IsLoggedService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: IsLoggedService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.AuthService }, { type: i2.Router }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['AUTH_URLS']
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNMb2dnZWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nYm9vc3QtYXV0aC9zcmMvbGliL3JvdXRlR3VhcmRzL2lzTG9nZ2VkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFLbkQ7O0dBRUc7QUFFSCxNQUFNLE9BQU8sZUFBZTtJQUUxQixZQUNVLFdBQXdCLEVBQ3hCLENBQVMsRUFDWSxTQUFjO1FBRm5DLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDWSxjQUFTLEdBQVQsU0FBUyxDQUFLO0lBQ3pDLENBQUM7SUFHTCxXQUFXLENBQUMsR0FBMkIsRUFBRSxHQUF3QjtRQUUvRCwrREFBK0Q7UUFDL0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3hELDJEQUEyRDtRQUUzRCxNQUFNLGVBQWUsR0FBWSxDQUFDLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1FBRXZFLHFCQUFxQjtRQUNyQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNuRCxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLGlGQUFpRixDQUFDLENBQUMsQ0FBQztRQUM5RyxDQUFDO1FBRUQsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQzs4R0F4QlUsZUFBZSxtRUFLaEIsV0FBVztrSEFMVixlQUFlOzsyRkFBZixlQUFlO2tCQUQzQixVQUFVOzswQkFNTixNQUFNOzJCQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyU3RhdGVTbmFwc2hvdCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gJy4uL2F1dGguc2VydmljZSc7XG5cblxuLyoqXG4gKiBDaGVjayBpZiB1c2VyIGlzIGxvZ2dlZC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIElzTG9nZ2VkU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhdXRoU2VydmljZTogQXV0aFNlcnZpY2UsXG4gICAgcHJpdmF0ZSByOiBSb3V0ZXIsXG4gICAgQEluamVjdCgnQVVUSF9VUkxTJykgcHJpdmF0ZSBhdXRoX3VybHM6IGFueSwgLy8ge2FmdGVyR29vZExvZ2luOiAsIGFmdGVyQmFkTG9naW46ICwgYWZ0ZXJMb2dvdXQ6IH1cbiAgKSB7IH1cblxuXG4gIGNhbkFjdGl2YXRlKGFyczogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgcnNzOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KSB7XG5cbiAgICAvLyBnZXQgbG9nZ2VkVXNlciBpbmZvIGFmdGVyIHN1Y2Nlc3NmdWwgdXNlcm5hbWU6cGFzc3dvcmQgbG9naW5cbiAgICBjb25zdCBsb2dnZWRVc2VyID0gdGhpcy5hdXRoU2VydmljZS5nZXRMb2dnZWRVc2VySW5mbygpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdHVUFSRDo6aXNMb2dnZWQ6bG9nZ2VkVXNlcjogJywgbG9nZ2VkVXNlcik7XG5cbiAgICBjb25zdCBpc0FscmVhZHlMb2dnZWQ6IGJvb2xlYW4gPSAhIWxvZ2dlZFVzZXIgJiYgISFsb2dnZWRVc2VyLnVzZXJuYW1lO1xuXG4gICAgLy8gcmVkaXJlY3QgdG8gL2xvZ2luXG4gICAgaWYgKCFpc0FscmVhZHlMb2dnZWQpIHtcbiAgICAgIHRoaXMuci5uYXZpZ2F0ZUJ5VXJsKHRoaXMuYXV0aF91cmxzLmFmdGVyQmFkTG9naW4pO1xuICAgICAgY29uc29sZS5lcnJvcihuZXcgRXJyb3IoJ0d1YXJkIGJsb2NrcyB0aGlzIHJvdXRlIGJlY2F1c2UgdXNlciBpcyBub3QgbG9nZ2VkLiBSZWRpcmVjdGlvbiB0byAvbG9naW4gcGFnZS4nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzQWxyZWFkeUxvZ2dlZDtcbiAgfVxuXG5cbn1cbiJdfQ==