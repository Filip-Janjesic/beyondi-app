import { Injectable, Inject } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../auth.service";
import * as i2 from "@angular/router";
/**
 * Check if user is logged and if yes do auto login e.g. redirect to afterGoodLogin URL.
 * This guard service apply only on /login route.
 */
export class AutologinService {
    constructor(authService, r, auth_urls) {
        this.authService = authService;
        this.r = r;
        this.auth_urls = auth_urls;
    }
    canActivate(ars, rss) {
        // get loggedUser info after successful username:password login
        const loggedUser = this.authService.getLoggedUserInfo();
        // console.log('GUARD::autoLogin:loggedUser: ', loggedUser);
        const isAlreadyLogged = !!loggedUser && !!loggedUser.username;
        // redirect
        if (isAlreadyLogged) {
            const afterGoodLoginURL = this.auth_urls.afterGoodLogin.replace('{loggedUserRole}', loggedUser.role);
            this.r.navigateByUrl(afterGoodLoginURL);
        }
        return true; // always activate this route
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: AutologinService, deps: [{ token: i1.AuthService }, { token: i2.Router }, { token: 'AUTH_URLS' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: AutologinService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: AutologinService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.AuthService }, { type: i2.Router }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['AUTH_URLS']
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b0xvZ2luLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ2Jvb3N0LWF1dGgvc3JjL2xpYi9yb3V0ZUd1YXJkcy9hdXRvTG9naW4uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUtuRDs7O0dBR0c7QUFFSCxNQUFNLE9BQU8sZ0JBQWdCO0lBRTNCLFlBQ1UsV0FBd0IsRUFDeEIsQ0FBUyxFQUNZLFNBQWM7UUFGbkMsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNZLGNBQVMsR0FBVCxTQUFTLENBQUs7SUFDekMsQ0FBQztJQUdMLFdBQVcsQ0FBQyxHQUEyQixFQUFFLEdBQXdCO1FBQy9ELCtEQUErRDtRQUMvRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDeEQsNERBQTREO1FBRTVELE1BQU0sZUFBZSxHQUFZLENBQUMsQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7UUFFdkUsV0FBVztRQUNYLElBQUksZUFBZSxFQUFFLENBQUM7WUFDcEIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JHLElBQUksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDLENBQUMsNkJBQTZCO0lBQzVDLENBQUM7OEdBdkJVLGdCQUFnQixtRUFLakIsV0FBVztrSEFMVixnQkFBZ0I7OzJGQUFoQixnQkFBZ0I7a0JBRDVCLFVBQVU7OzBCQU1OLE1BQU07MkJBQUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXJTdGF0ZVNuYXBzaG90IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi4vYXV0aC5zZXJ2aWNlJztcblxuXG4vKipcbiAqIENoZWNrIGlmIHVzZXIgaXMgbG9nZ2VkIGFuZCBpZiB5ZXMgZG8gYXV0byBsb2dpbiBlLmcuIHJlZGlyZWN0IHRvIGFmdGVyR29vZExvZ2luIFVSTC5cbiAqIFRoaXMgZ3VhcmQgc2VydmljZSBhcHBseSBvbmx5IG9uIC9sb2dpbiByb3V0ZS5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEF1dG9sb2dpblNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlLFxuICAgIHByaXZhdGUgcjogUm91dGVyLFxuICAgIEBJbmplY3QoJ0FVVEhfVVJMUycpIHByaXZhdGUgYXV0aF91cmxzOiBhbnksIC8vIHthZnRlckdvb2RMb2dpbjogLCBhZnRlckJhZExvZ2luOiAsIGFmdGVyTG9nb3V0OiB9XG4gICkgeyB9XG5cblxuICBjYW5BY3RpdmF0ZShhcnM6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHJzczogUm91dGVyU3RhdGVTbmFwc2hvdCkge1xuICAgIC8vIGdldCBsb2dnZWRVc2VyIGluZm8gYWZ0ZXIgc3VjY2Vzc2Z1bCB1c2VybmFtZTpwYXNzd29yZCBsb2dpblxuICAgIGNvbnN0IGxvZ2dlZFVzZXIgPSB0aGlzLmF1dGhTZXJ2aWNlLmdldExvZ2dlZFVzZXJJbmZvKCk7XG4gICAgLy8gY29uc29sZS5sb2coJ0dVQVJEOjphdXRvTG9naW46bG9nZ2VkVXNlcjogJywgbG9nZ2VkVXNlcik7XG5cbiAgICBjb25zdCBpc0FscmVhZHlMb2dnZWQ6IGJvb2xlYW4gPSAhIWxvZ2dlZFVzZXIgJiYgISFsb2dnZWRVc2VyLnVzZXJuYW1lO1xuXG4gICAgLy8gcmVkaXJlY3RcbiAgICBpZiAoaXNBbHJlYWR5TG9nZ2VkKSB7XG4gICAgICBjb25zdCBhZnRlckdvb2RMb2dpblVSTCA9IHRoaXMuYXV0aF91cmxzLmFmdGVyR29vZExvZ2luLnJlcGxhY2UoJ3tsb2dnZWRVc2VyUm9sZX0nLCBsb2dnZWRVc2VyLnJvbGUpO1xuICAgICAgdGhpcy5yLm5hdmlnYXRlQnlVcmwoYWZ0ZXJHb29kTG9naW5VUkwpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlOyAvLyBhbHdheXMgYWN0aXZhdGUgdGhpcyByb3V0ZVxuICB9XG5cblxufVxuXG4iXX0=