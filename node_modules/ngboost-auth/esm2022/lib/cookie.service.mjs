import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class CookieService {
    constructor() {
        // check if HTML document is available
        this.doc_avail = !!document; // true | false
    }
    /**
     * Show console error
     */
    errNotAvailable() {
        console.error('Document is not available in ng5plus-cookies.');
    }
    /**
     * Add cookie options: domain, path, expires, secure
     * @param cookieStr string
     * @param cookieOpts object
     */
    addCookieOptions(cookieStr, cookieOpts) {
        if (!cookieOpts) {
            return cookieStr;
        }
        // domain=example.com;
        if (!!cookieOpts.domain) {
            const cDomain = 'domain=' + cookieOpts.domain + ';';
            cookieStr += cDomain;
        }
        // path=/;
        if (!!cookieOpts.path) {
            const cPath = 'path=' + cookieOpts.path + ';';
            cookieStr += cPath;
        }
        // expires=Fri, 3 Aug 2001 20:47:11 UTC;
        if (!!cookieOpts.expires) {
            let expires;
            if (typeof cookieOpts.expires === 'number') {
                const d = new Date();
                d.setTime(d.getTime() + (cookieOpts.expires * 24 * 60 * 60 * 1000));
                expires = 'expires=' + d.toUTCString();
            }
            else {
                expires = cookieOpts.expires.toUTCString();
            }
            const cExpires = 'expires=' + expires + ';';
            cookieStr += cExpires;
        }
        // secure;
        if (!!cookieOpts.secure) {
            const cSecure = 'secure;';
            cookieStr += cSecure;
        }
        // HttpOnly;
        if (!!cookieOpts.httpOnly) {
            const cHttpOnly = 'HttpOnly;';
            cookieStr += cHttpOnly;
        }
        // SameSite=lax; or SameSite=strict;
        if (!!cookieOpts.sameSite) {
            const cSameSite = 'SameSite=' + cookieOpts.sameSite + ';';
            cookieStr += cSameSite;
        }
        return cookieStr;
    }
    /**
     * Get all cookies in array format.
     * @return Array
     */
    allCookiesArr() {
        // fetch all cookies
        const allCookies = document.cookie; // authAPIInit1=jedan1; authAPIInit2=dva2; authAPI=
        // create cookie array
        const cookiesArr = allCookies.split(';'); // ["authAPIInit1=jedan1", " authAPIInit2=dva2", " authAPI="]
        // remove empty spaces from left and right side
        const cookiesArrMapped = cookiesArr.map((cookiesPair) => {
            return cookiesPair.trim();
        });
        return cookiesArrMapped; // ["authAPIInit1=jedan1", "authAPIInit2=dva2", "authAPI="]
    }
    /**
     * Set cookie. Cookie value is string.
     * @param name - cookie name
     * @param value - cookie value (string)
     * @param cookieOpts - cookie options: domain, path, expires, secure, HttpOnly, SameSite
     * @param debug - true | false (show errors and debug info)
     */
    put(name, value, cookieOpts, debug) {
        if (!this.doc_avail) {
            if (debug) {
                this.errNotAvailable();
            }
            return;
        }
        // encoding cookie value
        value = encodeURIComponent(value);
        // name=value;
        let cookieStr = name + '=' + value + ';';
        // add cookie options: domain, path, expires, secure, HttpOnly, SameSite
        cookieStr = this.addCookieOptions(cookieStr, cookieOpts);
        // debug
        if (debug) {
            console.log('cookie-put():cookieStr: ', cookieStr);
        }
        // put cookie
        document.cookie = cookieStr;
    }
    /**
     * Set cookie. Cookie value is object.
     * @param name - cookie name
     * @param value - cookie value (object)
     * @param cookieOpts - cookie options: domain, path, expires, secure, HttpOnly, SameSite
     * @param debug - true | false (show errors and debug info)
     */
    putObject(name, value, cookieOpts, debug) {
        if (!this.doc_avail) {
            if (debug) {
                this.errNotAvailable();
            }
            return;
        }
        // convert object to string and encode that string
        const valueStr = encodeURIComponent(JSON.stringify(value));
        // name=value;
        let cookieStr = name + '=' + valueStr + ';';
        // add cookie options: domain, path, expires, secure, HttpOnly, SameSite
        cookieStr = this.addCookieOptions(cookieStr, cookieOpts);
        // debug
        if (debug) {
            console.log('cookie-putObject(): ', cookieStr);
        }
        // put cookie
        document.cookie = cookieStr;
    }
    /**
     * Get all cookies in string format (cook1=jedan1; cook2=dva2;).
     * @param debug - true | false (show errors and debug info)
     * @return string - example: cook1=jedan1; cook2=dva2;
     */
    getAll(debug) {
        if (!this.doc_avail) {
            if (debug) {
                this.errNotAvailable();
            }
            return '';
        }
        // fetch all cookies
        const allCookies = document.cookie; // 'cook1=jedan1; cook2=dva2;'
        // debug
        if (debug) {
            console.log('cookie-getAll(): ', allCookies);
        }
        return allCookies;
    }
    /**
     * Get cookie by specific name. Returned value is string.
     * @param name - cookie name
     * @param debug - true | false (show errors and debug info)
     * @return string
     */
    get(name, debug) {
        if (!this.doc_avail) {
            if (debug) {
                this.errNotAvailable();
            }
            return '';
        }
        // get cookies array
        const cookiesArr = this.allCookiesArr(); // ["authAPIInit1=jedan1", "authAPIInit2=dva2", "authAPI="]
        // extract cookie value for specific name
        let elemArr, cookieVal = '';
        cookiesArr.forEach(function (elem) {
            elemArr = elem.split('='); // ["authAPIInit1", "jedan1"]
            if (elemArr[0] === name) {
                cookieVal = elemArr[1] || '';
            }
        });
        // decoding cookie value
        cookieVal = decodeURIComponent(cookieVal);
        // debug
        if (debug) {
            console.log('cookie-get()-cookiesArr: ', cookiesArr);
            console.log('cookie-get()-cookieVal: ', name, '=', cookieVal);
        }
        return cookieVal;
    }
    /**
     * Get cookie by specific name. Returned value is object.
     * @param name - cookie name
     * @param debug - true | false (show errors and debug info)
     * @return object
     */
    getObject(name, debug) {
        if (!this.doc_avail) {
            if (debug) {
                this.errNotAvailable();
            }
            return null;
        }
        const cookieVal = this.get(name, debug); // %7B%22jen%22%3A1%2C%22dva%22%3A%22dvica%22%7D
        // convert cookie string value to object
        let cookieObj = null;
        try {
            if (cookieVal !== 'undefined' && !!cookieVal) {
                cookieObj = JSON.parse(decodeURIComponent(cookieVal));
            }
        }
        catch (err) {
            console.error('cookie-getObject(): ', err);
        }
        // debug
        if (debug) {
            console.log('cookie-getObject():cookieVal: ', cookieVal);
            console.log('cookie-getObject():cookieObj: ', cookieObj);
        }
        return cookieObj;
    }
    /**
     * Remove cookie by specific name.
     * @param name - cookie name
     * @param debug - true | false (show errors and debug info)
     * @return void
     */
    remove(name, debug) {
        if (!this.doc_avail) {
            if (debug) {
                this.errNotAvailable();
            }
            return;
        }
        // set expires backward to delete cookie
        const dateOld = new Date('1970-01-01T01:00:00');
        // debug
        if (debug) {
            console.log('cookie-remove(): ', name, ' cookie is deleted.');
        }
        // cookie removal
        document.cookie = name + '=;expires=' + dateOld + '; path=/;';
    }
    /**
     * Remove all cookies.
     * @param debug - true | false (show errors and debug info)
     * @return void
     */
    removeAll(debug) {
        if (!this.doc_avail) {
            if (debug) {
                this.errNotAvailable();
            }
            return;
        }
        // set expires backward to delete cookie
        const dateOld = new Date('1970-01-01T01:00:00').toUTCString();
        // get cookies array
        const cookiesArr = this.allCookiesArr(); // ["authAPIInit1=jedan1", "authAPIInit2=dva2", "authAPI="]
        // extract cookie value for specific name
        let elemArr;
        const cookiesArr2 = [];
        cookiesArr.forEach(function (elem) {
            elemArr = elem.split('='); // ["authAPIInit1", "jedan1"]
            document.cookie = elemArr[0] + '=;expires=' + dateOld + '; path=/;';
            cookiesArr2.push(document.cookie);
        });
        // debug
        if (debug) {
            console.log('cookie-removeAll():before:: ', cookiesArr);
            console.log('cookie-removeAll():after:: ', cookiesArr2);
        }
    }
    /**
     * Empty cookie value by specific name.
     * @param name - cookie name
     * @param debug - true | false (show errors and debug info)
     * @return void
     */
    empty(name, debug) {
        if (!this.doc_avail) {
            if (debug) {
                this.errNotAvailable();
            }
            return;
        }
        // empty cookie value
        document.cookie = name + '=;';
        // debug
        if (debug) {
            console.log('cookie-empty(): ', name);
        }
    }
    /**
     * Check if cookie exists.
     * @param name - cookie name
     * @param debug - true | false (show errors and debug info)
     * @return boolean
     */
    exists(name, debug) {
        if (!this.doc_avail) {
            if (debug) {
                this.errNotAvailable();
            }
            return false;
        }
        // get cookies array
        const cookiesArr = this.allCookiesArr(); // ["authAPIInit1=jedan1", "authAPIInit2=dva2", "authAPI="]
        // extract cookie value for specific name
        let elemArr, cookieExists = false;
        cookiesArr.forEach(function (elem) {
            elemArr = elem.split('='); // ["authAPIInit1", "jedan1"]
            if (elemArr[0] === name) {
                cookieExists = true;
            }
        });
        // debug
        if (debug) {
            console.log('cookie-exists(): ', cookieExists);
        }
        return cookieExists;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: CookieService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: CookieService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.3", ngImport: i0, type: CookieService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,