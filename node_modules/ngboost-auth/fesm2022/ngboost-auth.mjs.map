{"version":3,"file":"ngboost-auth.mjs","sources":["../../../projects/ngboost-auth/src/lib/cookie.service.ts","../../../projects/ngboost-auth/src/lib/auth.service.ts","../../../projects/ngboost-auth/src/lib/jwtTokenInterceptor.service.ts","../../../projects/ngboost-auth/src/lib/routeGuards/isLogged.service.ts","../../../projects/ngboost-auth/src/lib/routeGuards/hasRole.service.ts","../../../projects/ngboost-auth/src/lib/routeGuards/autoLogin.service.ts","../../../projects/ngboost-auth/src/lib/ngboost-auth.module.ts","../../../projects/ngboost-auth/src/ngboost-auth.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n\nexport interface CookieOptions {\n  domain?: string;\n  path?: string;\n  expires?: number | Date; // number of days or exact date\n  secure?: boolean;\n  httpOnly?: boolean;\n  sameSite?: string; // 'strict' for GET and POST, 'lax' only for POST\n}\n\n\n\n@Injectable()\nexport class CookieService {\n\n  private doc_avail: boolean;\n\n  constructor() {\n    // check if HTML document is available\n    this.doc_avail = !!document; // true | false\n  }\n\n\n  /**\n   * Show console error\n   */\n  private errNotAvailable() {\n    console.error('Document is not available in ng5plus-cookies.');\n  }\n\n\n  /**\n   * Add cookie options: domain, path, expires, secure\n   * @param cookieStr string\n   * @param cookieOpts object\n   */\n  private addCookieOptions(cookieStr: string, cookieOpts?: any) {\n    if (!cookieOpts) {\n      return cookieStr;\n    }\n\n    // domain=example.com;\n    if (!!cookieOpts.domain) {\n      const cDomain = 'domain=' + cookieOpts.domain + ';';\n      cookieStr += cDomain;\n    }\n\n    // path=/;\n    if (!!cookieOpts.path) {\n      const cPath = 'path=' + cookieOpts.path + ';';\n      cookieStr += cPath;\n    }\n\n    // expires=Fri, 3 Aug 2001 20:47:11 UTC;\n    if (!!cookieOpts.expires) {\n      let expires;\n      if (typeof cookieOpts.expires === 'number') {\n        const d = new Date();\n        d.setTime(d.getTime() + (cookieOpts.expires * 24 * 60 * 60 * 1000));\n        expires = 'expires=' + d.toUTCString();\n      } else {\n        expires = cookieOpts.expires.toUTCString();\n      }\n      const cExpires = 'expires=' + expires + ';';\n\n      cookieStr += cExpires;\n    }\n\n    // secure;\n    if (!!cookieOpts.secure) {\n      const cSecure = 'secure;';\n      cookieStr += cSecure;\n    }\n\n    // HttpOnly;\n    if (!!cookieOpts.httpOnly) {\n      const cHttpOnly = 'HttpOnly;';\n      cookieStr += cHttpOnly;\n    }\n\n    // SameSite=lax; or SameSite=strict;\n    if (!!cookieOpts.sameSite) {\n      const cSameSite = 'SameSite=' + cookieOpts.sameSite + ';';\n      cookieStr += cSameSite;\n    }\n\n\n    return cookieStr;\n  }\n\n\n\n  /**\n   * Get all cookies in array format.\n   * @return Array\n   */\n  private allCookiesArr() {\n    // fetch all cookies\n    const allCookies = document.cookie; // authAPIInit1=jedan1; authAPIInit2=dva2; authAPI=\n\n    // create cookie array\n    const cookiesArr: string[] = allCookies.split(';'); // [\"authAPIInit1=jedan1\", \" authAPIInit2=dva2\", \" authAPI=\"]\n\n    // remove empty spaces from left and right side\n    const cookiesArrMapped = cookiesArr.map((cookiesPair: string) => { // cookiePair: \" authAPIInit2=dva2\"\n      return cookiesPair.trim();\n    });\n\n    return cookiesArrMapped; // [\"authAPIInit1=jedan1\", \"authAPIInit2=dva2\", \"authAPI=\"]\n  }\n\n\n\n  /**\n   * Set cookie. Cookie value is string.\n   * @param name - cookie name\n   * @param value - cookie value (string)\n   * @param cookieOpts - cookie options: domain, path, expires, secure, HttpOnly, SameSite\n   * @param debug - true | false (show errors and debug info)\n   */\n  put(name: string, value: string, cookieOpts?: CookieOptions, debug?: boolean): void {\n    if (!this.doc_avail) {\n      if (debug) {\n        this.errNotAvailable();\n      }\n      return;\n    }\n\n    // encoding cookie value\n    value = encodeURIComponent(value);\n\n    // name=value;\n    let cookieStr = name + '=' + value + ';';\n\n    // add cookie options: domain, path, expires, secure, HttpOnly, SameSite\n    cookieStr = this.addCookieOptions(cookieStr, cookieOpts);\n\n    // debug\n    if (debug) {\n      console.log('cookie-put():cookieStr: ', cookieStr);\n    }\n\n    // put cookie\n    document.cookie = cookieStr;\n  }\n\n\n\n  /**\n   * Set cookie. Cookie value is object.\n   * @param name - cookie name\n   * @param value - cookie value (object)\n   * @param cookieOpts - cookie options: domain, path, expires, secure, HttpOnly, SameSite\n   * @param debug - true | false (show errors and debug info)\n   */\n  putObject(name: string, value: any, cookieOpts?: CookieOptions, debug?: boolean): void {\n    if (!this.doc_avail) {\n      if (debug) {\n        this.errNotAvailable();\n      }\n      return;\n    }\n\n    // convert object to string and encode that string\n    const valueStr = encodeURIComponent(JSON.stringify(value));\n\n    // name=value;\n    let cookieStr = name + '=' + valueStr + ';';\n\n    // add cookie options: domain, path, expires, secure, HttpOnly, SameSite\n    cookieStr = this.addCookieOptions(cookieStr, cookieOpts);\n\n    // debug\n    if (debug) {\n      console.log('cookie-putObject(): ', cookieStr);\n    }\n\n    // put cookie\n    document.cookie = cookieStr;\n  }\n\n\n\n  /**\n   * Get all cookies in string format (cook1=jedan1; cook2=dva2;).\n   * @param debug - true | false (show errors and debug info)\n   * @return string - example: cook1=jedan1; cook2=dva2;\n   */\n  getAll(debug?: boolean): string {\n    if (!this.doc_avail) {\n      if (debug) { this.errNotAvailable(); }\n      return '';\n    }\n\n    // fetch all cookies\n    const allCookies = document.cookie; // 'cook1=jedan1; cook2=dva2;'\n\n    // debug\n    if (debug) { console.log('cookie-getAll(): ', allCookies); }\n\n    return allCookies;\n  }\n\n\n\n  /**\n   * Get cookie by specific name. Returned value is string.\n   * @param name - cookie name\n   * @param debug - true | false (show errors and debug info)\n   * @return string\n   */\n  get(name: string, debug?: boolean): string {\n    if (!this.doc_avail) {\n      if (debug) { this.errNotAvailable(); }\n      return '';\n    }\n\n    // get cookies array\n    const cookiesArr: string[] = this.allCookiesArr(); // [\"authAPIInit1=jedan1\", \"authAPIInit2=dva2\", \"authAPI=\"]\n\n    // extract cookie value for specific name\n    let elemArr, cookieVal = '';\n    cookiesArr.forEach(function(elem: string) {\n      elemArr = elem.split('='); // [\"authAPIInit1\", \"jedan1\"]\n      if (elemArr[0] === name) {\n        cookieVal = elemArr[1] || '';\n      }\n    });\n\n    // decoding cookie value\n    cookieVal = decodeURIComponent(cookieVal);\n\n    // debug\n    if (debug) {\n      console.log('cookie-get()-cookiesArr: ', cookiesArr);\n      console.log('cookie-get()-cookieVal: ', name, '=', cookieVal);\n    }\n\n    return cookieVal;\n  }\n\n\n\n  /**\n   * Get cookie by specific name. Returned value is object.\n   * @param name - cookie name\n   * @param debug - true | false (show errors and debug info)\n   * @return object\n   */\n  getObject(name: string, debug?: boolean): any {\n    if (!this.doc_avail) {\n      if (debug) { this.errNotAvailable(); }\n      return null;\n    }\n\n    const cookieVal = this.get(name, debug); // %7B%22jen%22%3A1%2C%22dva%22%3A%22dvica%22%7D\n\n    // convert cookie string value to object\n    let cookieObj: any = null;\n    try {\n      if (cookieVal !== 'undefined' && !!cookieVal) {\n        cookieObj = JSON.parse(decodeURIComponent(cookieVal));\n      }\n    } catch (err) {\n      console.error('cookie-getObject(): ', err);\n    }\n\n    // debug\n    if (debug) {\n      console.log('cookie-getObject():cookieVal: ', cookieVal);\n      console.log('cookie-getObject():cookieObj: ', cookieObj);\n    }\n\n    return cookieObj;\n  }\n\n\n\n  /**\n   * Remove cookie by specific name.\n   * @param name - cookie name\n   * @param debug - true | false (show errors and debug info)\n   * @return void\n   */\n  remove(name: string, debug?: boolean): void {\n    if (!this.doc_avail) {\n      if (debug) { this.errNotAvailable(); }\n      return;\n    }\n\n    // set expires backward to delete cookie\n    const dateOld = new Date('1970-01-01T01:00:00');\n\n    // debug\n    if (debug) {\n      console.log('cookie-remove(): ', name, ' cookie is deleted.');\n    }\n\n    // cookie removal\n    document.cookie = name + '=;expires=' + dateOld + '; path=/;';\n  }\n\n\n\n  /**\n   * Remove all cookies.\n   * @param debug - true | false (show errors and debug info)\n   * @return void\n   */\n  removeAll(debug?: boolean): void {\n    if (!this.doc_avail) {\n      if (debug) { this.errNotAvailable(); }\n      return;\n    }\n\n    // set expires backward to delete cookie\n    const dateOld = new Date('1970-01-01T01:00:00').toUTCString();\n\n    // get cookies array\n    const cookiesArr: string[] = this.allCookiesArr(); // [\"authAPIInit1=jedan1\", \"authAPIInit2=dva2\", \"authAPI=\"]\n\n    // extract cookie value for specific name\n    let elemArr;\n    const cookiesArr2: any[] = [];\n    cookiesArr.forEach(function(elem: string) {\n      elemArr = elem.split('='); // [\"authAPIInit1\", \"jedan1\"]\n      document.cookie = elemArr[0] + '=;expires=' + dateOld + '; path=/;';\n      cookiesArr2.push(document.cookie);\n    });\n\n    // debug\n    if (debug) {\n      console.log('cookie-removeAll():before:: ', cookiesArr);\n      console.log('cookie-removeAll():after:: ', cookiesArr2);\n    }\n  }\n\n\n\n  /**\n   * Empty cookie value by specific name.\n   * @param name - cookie name\n   * @param debug - true | false (show errors and debug info)\n   * @return void\n   */\n  empty(name: string, debug?: boolean): void {\n    if (!this.doc_avail) {\n      if (debug) { this.errNotAvailable(); }\n      return;\n    }\n\n    // empty cookie value\n    document.cookie = name + '=;';\n\n    // debug\n    if (debug) {\n      console.log('cookie-empty(): ', name);\n    }\n  }\n\n\n\n  /**\n   * Check if cookie exists.\n   * @param name - cookie name\n   * @param debug - true | false (show errors and debug info)\n   * @return boolean\n   */\n  exists(name: string, debug?: boolean): boolean {\n    if (!this.doc_avail) {\n      if (debug) { this.errNotAvailable(); }\n      return false;\n    }\n\n    // get cookies array\n    const cookiesArr: string[] = this.allCookiesArr(); // [\"authAPIInit1=jedan1\", \"authAPIInit2=dva2\", \"authAPI=\"]\n\n    // extract cookie value for specific name\n    let elemArr, cookieExists = false;\n    cookiesArr.forEach(function(elem: string) {\n      elemArr = elem.split('='); // [\"authAPIInit1\", \"jedan1\"]\n      if (elemArr[0] === name) {\n        cookieExists = true;\n      }\n    });\n\n    // debug\n    if (debug) {\n      console.log('cookie-exists(): ', cookieExists);\n    }\n\n    return cookieExists;\n  }\n\n\n\n}\n","import { throwError, Observable } from 'rxjs';\n\nimport { catchError, tap } from 'rxjs/operators';\nimport { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\nimport { CookieService } from './cookie.service';\n\n\n\n// credentials interface\nexport interface Credentials {\n  username: string;\n  password: string;\n}\n\n\n// logged user info\nexport interface LoggedUser {\n  first_name: string;\n  last_name: string;\n  address?: string;\n  city?: string;\n  country?: string;\n\n  phone?: string;\n  email: string;\n  website?: string;\n\n  misc?: any;\n\n  username: string;\n  password?: string;\n\n  role: string;\n  is_active?: boolean;\n}\n\n\n\n@Injectable()\nexport class AuthService {\n\n  public jwtToken: string;\n  private loggedUser: LoggedUser | null;\n  private cookieOpts: any;\n\n  constructor(\n    private http: HttpClient,\n    private cookieService: CookieService,\n    private r: Router,\n    @Inject('AUTH_URLS') private auth_urls: any, // {apiLoginURL, afterGoodLogin, afterBadLogin, afterLogout}\n  ) {\n    this.cookieOpts = {\n      // domain: 'localhost',\n      path: '/',\n      expires: 3,\n      // expires: new Date('2018-10-31T03:24:00'),\n      secure: false,\n      httpOnly: false,\n      sameSite: 'strict'\n    };\n  }\n\n\n  /**\n   * Login with username and password\n   * @param creds // credentials object {username: xxx, password: xxx}\n   * @return Observable\n   */\n  login(creds: Credentials): Observable<any> {\n    return this.http.post(this.auth_urls.apiLoginUrl, creds).pipe(\n      tap((apiResp: any) => {\n\n        /* set cookie 'auth_jwtToken': 'JWT xyz...' */\n        if (!!apiResp && !!apiResp.jwtToken) {\n          this.cookieService.put('auth_jwtToken', apiResp.jwtToken, this.cookieOpts, false);\n        }\n\n        /* set cookie 'auth_loggedUser' and class property 'this.loggedUser': {first_name: , last_name: , ...} */\n        if (!!apiResp && !!apiResp.loggedUser) {\n          this.cookieService.putObject('auth_loggedUser', apiResp.loggedUser, this.cookieOpts, false);\n          this.loggedUser = apiResp.loggedUser;\n        }\n\n        /* redirect to URL */\n        const afterGoodLoginURL = this.auth_urls.afterGoodLogin.replace('{loggedUserRole}', apiResp.loggedUser.role);\n        this.r.navigateByUrl(afterGoodLoginURL);\n      }),\n      catchError((err: Error) => {\n        /* remove all cookies */\n        this.cookieService.removeAll(false);\n\n        /* remove loggedUser class property */\n        this.loggedUser = null;\n\n        // return error\n        return throwError(() => err);\n      }));\n\n  }\n\n\n\n  /**\n   * Logout\n   * @return Observable\n   */\n  logout(): void {\n    // delete all cookies\n    this.cookieService.removeAll(false);\n\n    // delete class property\n    this.loggedUser = null;\n\n    // redirect\n    setTimeout(() => {\n      const afterLogoutURL = this.auth_urls.afterLogout;\n      this.r.navigateByUrl(afterLogoutURL);\n    }, 300);\n\n  }\n\n\n  /**\n   * Get logged user info (from global variables or cookie)\n   * @return object - {first_name: , last_name: , ...}\n   */\n  getLoggedUserInfo(): LoggedUser {\n    const loggedUser: LoggedUser = this.loggedUser || this.cookieService.getObject('auth_loggedUser', false);\n    return loggedUser;\n  }\n\n\n  /**\n   * Get JWT token from cookie\n   * @return string - JWT eyJhbGciOiJIUzI1NiIsInR...\n   */\n  getJWTtoken(): string {\n    const jwtToken: string = this.cookieService.get('auth_jwtToken', false) || 'JWT ';\n    return jwtToken;\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { AuthService } from './auth.service';\nimport { Observable } from 'rxjs';\n\n\n/**\n * Intercept every HTTP erquest.\n */\n@Injectable()\nexport class JwtTokenInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const jwtToken: string = this.authService.getJWTtoken();\n    req = req.clone({\n      setHeaders: {\n        Authorization: jwtToken\n      }\n    });\n    return next.handle(req);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\n\n/**\n * Check if user is logged.\n */\n@Injectable()\nexport class IsLoggedService {\n\n  constructor(\n    private authService: AuthService,\n    private r: Router,\n    @Inject('AUTH_URLS') private auth_urls: any, // {afterGoodLogin: , afterBadLogin: , afterLogout: }\n  ) { }\n\n\n  canActivate(ars: ActivatedRouteSnapshot, rss: RouterStateSnapshot) {\n\n    // get loggedUser info after successful username:password login\n    const loggedUser = this.authService.getLoggedUserInfo();\n    // console.log('GUARD::isLogged:loggedUser: ', loggedUser);\n\n    const isAlreadyLogged: boolean = !!loggedUser && !!loggedUser.username;\n\n    // redirect to /login\n    if (!isAlreadyLogged) {\n      this.r.navigateByUrl(this.auth_urls.afterBadLogin);\n      console.error(new Error('Guard blocks this route because user is not logged. Redirection to /login page.'));\n    }\n\n    return isAlreadyLogged;\n  }\n\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\n\n/**\n * Check if user has required role: admin, customer. If not redirect to /login page.\n */\n@Injectable()\nexport class HasRoleService {\n\n  constructor(\n    private authService: AuthService,\n    private r: Router,\n    @Inject('AUTH_URLS') private auth_urls: any, // {afterGoodLogin: , afterBadLogin: , afterLogout: }\n  ) { }\n\n\n  canActivate(ars: ActivatedRouteSnapshot, rss: RouterStateSnapshot) {\n\n    // get loggedUser info after successful username:password login\n    const loggedUser = this.authService.getLoggedUserInfo();\n    // console.log('GUARD::hasRole:loggedUser: ', loggedUser);\n\n    // get current URL and check if user's role (admin, customer) is contained in it\n    const currentUrl = rss.url; // '/admin/dashboard'\n    // console.log('GUARD::hasRole:currentUrl: ', currentUrl);\n\n    let tf = false;\n    if (loggedUser) {\n      tf = currentUrl.indexOf(loggedUser.role) !== -1;\n    }\n\n    if (!tf) {\n      this.r.navigateByUrl(this.auth_urls.afterBadLogin);\n      console.error(new Error('Guard blocks this route because user doesn\\'t have good role. Redirection to /login page.'));\n    }\n\n    return tf;\n  }\n\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\n\n/**\n * Check if user is logged and if yes do auto login e.g. redirect to afterGoodLogin URL.\n * This guard service apply only on /login route.\n */\n@Injectable()\nexport class AutologinService {\n\n  constructor(\n    private authService: AuthService,\n    private r: Router,\n    @Inject('AUTH_URLS') private auth_urls: any, // {afterGoodLogin: , afterBadLogin: , afterLogout: }\n  ) { }\n\n\n  canActivate(ars: ActivatedRouteSnapshot, rss: RouterStateSnapshot) {\n    // get loggedUser info after successful username:password login\n    const loggedUser = this.authService.getLoggedUserInfo();\n    // console.log('GUARD::autoLogin:loggedUser: ', loggedUser);\n\n    const isAlreadyLogged: boolean = !!loggedUser && !!loggedUser.username;\n\n    // redirect\n    if (isAlreadyLogged) {\n      const afterGoodLoginURL = this.auth_urls.afterGoodLogin.replace('{loggedUserRole}', loggedUser.role);\n      this.r.navigateByUrl(afterGoodLoginURL);\n    }\n\n    return true; // always activate this route\n  }\n\n\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { AuthService } from './auth.service';\nimport { CookieService } from './cookie.service';\nimport { JwtTokenInterceptor } from './jwtTokenInterceptor.service';\nimport { IsLoggedService } from './routeGuards/isLogged.service';\nimport { HasRoleService } from './routeGuards/hasRole.service';\nimport { AutologinService } from './routeGuards/autoLogin.service';\n\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  providers: [\n    AuthService,\n    CookieService,\n    JwtTokenInterceptor,\n    IsLoggedService,\n    HasRoleService,\n    AutologinService,\n  ],\n  exports: []\n})\nexport class NgboostAuthModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.AuthService"],"mappings":"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"}