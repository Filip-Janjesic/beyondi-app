import * as i0 from "@angular/core";
export interface CookieOptions {
    domain?: string;
    path?: string;
    expires?: number | Date;
    secure?: boolean;
    httpOnly?: boolean;
    sameSite?: string;
}
export declare class CookieService {
    private doc_avail;
    constructor();
    /**
     * Show console error
     */
    private errNotAvailable;
    /**
     * Add cookie options: domain, path, expires, secure
     * @param cookieStr string
     * @param cookieOpts object
     */
    private addCookieOptions;
    /**
     * Get all cookies in array format.
     * @return Array
     */
    private allCookiesArr;
    /**
     * Set cookie. Cookie value is string.
     * @param name - cookie name
     * @param value - cookie value (string)
     * @param cookieOpts - cookie options: domain, path, expires, secure, HttpOnly, SameSite
     * @param debug - true | false (show errors and debug info)
     */
    put(name: string, value: string, cookieOpts?: CookieOptions, debug?: boolean): void;
    /**
     * Set cookie. Cookie value is object.
     * @param name - cookie name
     * @param value - cookie value (object)
     * @param cookieOpts - cookie options: domain, path, expires, secure, HttpOnly, SameSite
     * @param debug - true | false (show errors and debug info)
     */
    putObject(name: string, value: any, cookieOpts?: CookieOptions, debug?: boolean): void;
    /**
     * Get all cookies in string format (cook1=jedan1; cook2=dva2;).
     * @param debug - true | false (show errors and debug info)
     * @return string - example: cook1=jedan1; cook2=dva2;
     */
    getAll(debug?: boolean): string;
    /**
     * Get cookie by specific name. Returned value is string.
     * @param name - cookie name
     * @param debug - true | false (show errors and debug info)
     * @return string
     */
    get(name: string, debug?: boolean): string;
    /**
     * Get cookie by specific name. Returned value is object.
     * @param name - cookie name
     * @param debug - true | false (show errors and debug info)
     * @return object
     */
    getObject(name: string, debug?: boolean): any;
    /**
     * Remove cookie by specific name.
     * @param name - cookie name
     * @param debug - true | false (show errors and debug info)
     * @return void
     */
    remove(name: string, debug?: boolean): void;
    /**
     * Remove all cookies.
     * @param debug - true | false (show errors and debug info)
     * @return void
     */
    removeAll(debug?: boolean): void;
    /**
     * Empty cookie value by specific name.
     * @param name - cookie name
     * @param debug - true | false (show errors and debug info)
     * @return void
     */
    empty(name: string, debug?: boolean): void;
    /**
     * Check if cookie exists.
     * @param name - cookie name
     * @param debug - true | false (show errors and debug info)
     * @return boolean
     */
    exists(name: string, debug?: boolean): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<CookieService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CookieService>;
}
